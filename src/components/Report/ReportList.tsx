// src/components/Report/ReportList.tsx

import React, { useState } from 'react';
import {
  useFetchAllReportsQuery,
  useDeleteReportMutation,
} from '../../api/reportApi';
import { FiEye, FiDownload, FiTrash2 } from 'react-icons/fi';
import { useToast } from '../../features/Toast/ToastContext';
import { useNavigate } from 'react-router-dom';

interface ReportListProps {
  boardId: string; // <-- we will pass this in
}

const ReportList: React.FC<ReportListProps> = ({ boardId }) => {
  const [page, setPage] = useState(1);
  const limit = 10;

  // Use the boardId prop in your query
  const { data, error, isLoading, refetch } = useFetchAllReportsQuery({
    page,
    limit,
    boardId, // This replaces "currentBoardId"
  });

  const [deleteReport] = useDeleteReportMutation();
  const { showToast } = useToast();
  const navigate = useNavigate(); // <-- add useNavigate

  const handleView = (report: any) => {
    // Navigate to the report page
    navigate(`/dashboard/board-reports/${report._id}`);
  };

  const handleExport = (report: any) => {
    const blob = new Blob([JSON.stringify(report.data, null, 2)], {
      type: 'application/json',
    });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute(
      'download',
      `${report.title || 'report'}_${new Date(report.generatedAt).toISOString()}.json`
    );
    document.body.appendChild(link);
    link.click();
    link.remove();
  };

  const onDelete = async (reportId: string) => {
    if (!window.confirm('Are you sure you want to delete this report?')) return;

    try {
      await deleteReport(reportId).unwrap();
      showToast('Report deleted successfully', 'success');
      refetch();
    } catch (err: any) {
      showToast(err?.data?.error || 'Failed to delete', 'error');
    }
  };

  if (isLoading) return <p className="p-4">Loading reports...</p>;
  if (error) return <p className="p-4 text-red-500">Failed to load reports.</p>;

  const reports = data?.reports || [];
  const totalPages = data?.pages || 1;

  return (
    <div className="p-4 bg-white shadow rounded text-gray-800">
      <h2 className="text-2xl font-bold mb-4">All Reports</h2>

      <div className="overflow-x-auto">
        <table className="min-w-full border border-gray-200">
          <thead>
            <tr className="bg-gray-100">
              <th className="p-3 text-left">Type</th>
              <th className="p-3 text-left">Generated By</th>
              <th className="p-3 text-left">Generated At</th>
              <th className="p-3 text-center">Actions</th>
            </tr>
          </thead>
          <tbody>
            {reports.map((report: any) => (
              <tr key={report._id} className="border-b">
                <td className="p-3">{report.reportType}</td>
                <td className="p-3">
                  {report.generatedBy?.name} ({report.generatedBy?.email})
                </td>
                <td className="p-3">
                  {new Date(report.generatedAt).toLocaleString()}
                </td>
                <td className="p-3 flex justify-center space-x-2">
                  {/* Export */}
                  <button
                    onClick={() => handleExport(report)}
                    className="p-2 bg-green-200 hover:bg-green-300 rounded-full"
                    title="Export Report"
                  >
                    <FiDownload />
                  </button>
                  {/* View */}
                  <button
                    onClick={() => handleView(report)}
                    className="p-2 bg-blue-200 hover:bg-blue-300 rounded-full"
                    title="View Report"
                  >
                    <FiEye />
                  </button>
                  {/* Delete */}
                  <button
                    onClick={() => onDelete(report._id)}
                    className="p-2 bg-red-200 hover:bg-red-300 rounded-full"
                    title="Delete Report"
                  >
                    <FiTrash2 />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      <div className="mt-4 flex space-x-2">
        {Array.from({ length: totalPages }, (_, i) => i + 1).map((num) => (
          <button
            key={num}
            onClick={() => setPage(num)}
            className={`px-3 py-1 rounded ${
              page === num ? 'bg-blue-600 text-white' : 'bg-gray-200'
            }`}
          >
            {num}
          </button>
        ))}
      </div>
    </div>
  );
};

export default ReportList;
