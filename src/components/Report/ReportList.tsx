import React, { useState } from 'react';
import {
  useFetchAllReportsQuery,
  useDeleteReportMutation,
} from '../../api/reportApi';
import { FiEye, FiDownload, FiTrash2, FiGrid, FiList } from 'react-icons/fi';
import { useToast } from '../../features/Toast/ToastContext';
import { useNavigate } from 'react-router-dom';

// Framer Motion for animations
import { motion, AnimatePresence } from 'framer-motion';

interface ReportListProps {
  boardId: string;
}

const ReportList: React.FC<ReportListProps> = ({ boardId }) => {
  const [page, setPage] = useState(1);
  const [viewMode, setViewMode] = useState<'card' | 'list'>('card'); // Default to card view
  const limit = 10;

  // Fetch reports
  const { data, error, isLoading, refetch } = useFetchAllReportsQuery({
    page,
    limit,
    boardId,
  });

  const [deleteReport] = useDeleteReportMutation();
  const { showToast } = useToast();
  const navigate = useNavigate();

  const handleView = (report: any) => {
    navigate(`/dashboard/board-reports/${report._id}`);
  };

  const handleExport = (report: any) => {
    const blob = new Blob([JSON.stringify(report.data, null, 2)], {
      type: 'application/json',
    });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute(
      'download',
      `${report.title || 'report'}_${new Date(report.generatedAt).toISOString()}.json`
    );
    document.body.appendChild(link);
    link.click();
    link.remove();
  };

  const onDelete = async (reportId: string) => {
    if (!window.confirm('Are you sure you want to delete this report?')) return;
    try {
      await deleteReport(reportId).unwrap();
      showToast('Report deleted successfully', 'success');
      refetch();
    } catch (err: any) {
      showToast(err?.data?.error || 'Failed to delete', 'error');
    }
  };

  if (isLoading) {
    return <p className="p-4">Loading reports...</p>;
  }
  if (error) {
    return <p className="p-4 text-red-500">Failed to load reports.</p>;
  }

  const reports = data?.reports || [];
  const totalPages = data?.pages || 1;

  // Animation variants for each card/list item
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
  };

  return (
    <div className="p-4 bg-white shadow-md rounded text-gray-800">
      {/* Header with title and view mode toggle */}
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">All Reports</h2>
        <div className="flex space-x-2">
          <button
            onClick={() => setViewMode('card')}
            className={`p-2 rounded-md ${
              viewMode === 'card'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
            }`}
            title="Card View"
          >
            <FiGrid />
          </button>
          <button
            onClick={() => setViewMode('list')}
            className={`p-2 rounded-md ${
              viewMode === 'list'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
            }`}
            title="List View"
          >
            <FiList />
          </button>
        </div>
      </div>

      <AnimatePresence>
        {reports.length > 0 ? (
          viewMode === 'card' ? (
            // Card View
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {reports.map((report: any) => (
                <motion.div
                  key={report._id}
                  initial="hidden"
                  animate="visible"
                  exit="exit"
                  variants={itemVariants}
                  transition={{ duration: 0.2 }}
                  layout
                  className="bg-gray-50 p-4 rounded-md shadow-sm flex flex-col justify-between"
                >
                  {/* Top Section: Title / Type */}
                  <div className="mb-2">
                    <p className="text-sm text-gray-500">{report.reportType}</p>
                    <h3 className="font-semibold text-lg">
                      {report.title || 'Untitled Report'}
                    </h3>
                  </div>

                  {/* Middle Section: Generated By / Time */}
                  <div className="flex flex-col text-sm text-gray-600 mb-2">
                    <span>
                      <strong>Generated By:</strong> {report.generatedBy?.name} (
                      {report.generatedBy?.email})
                    </span>
                    <span>
                      <strong>Generated At:</strong>{' '}
                      {new Date(report.generatedAt).toLocaleString()}
                    </span>
                  </div>

                  {/* Actions */}
                  <div className="flex items-center justify-end space-x-2 mt-auto pt-2 border-t border-gray-200">
                    <button
                      onClick={() => handleExport(report)}
                      className="p-2 bg-green-100 text-green-700 rounded-full hover:bg-green-200 transition"
                      title="Export Report"
                    >
                      <FiDownload />
                    </button>
                    <button
                      onClick={() => handleView(report)}
                      className="p-2 bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition"
                      title="View Report"
                    >
                      <FiEye />
                    </button>
                    <button
                      onClick={() => onDelete(report._id)}
                      className="p-2 bg-red-100 text-red-700 rounded-full hover:bg-red-200 transition"
                      title="Delete Report"
                    >
                      <FiTrash2 />
                    </button>
                  </div>
                </motion.div>
              ))}
            </div>
          ) : (
            // List View
            <div className="overflow-x-auto">
              <table className="min-w-full border border-gray-200">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="p-3 text-left">Type</th>
                    <th className="p-3 text-left">Generated By</th>
                    <th className="p-3 text-left">Generated At</th>
                    <th className="p-3 text-center">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {reports.map((report: any) => (
                    <motion.tr
                      key={report._id}
                      initial="hidden"
                      animate="visible"
                      exit="exit"
                      variants={itemVariants}
                      className="border-b"
                    >
                      <td className="p-3">{report.reportType}</td>
                      <td className="p-3">
                        {report.generatedBy?.name} ({report.generatedBy?.email})
                      </td>
                      <td className="p-3">
                        {new Date(report.generatedAt).toLocaleString()}
                      </td>
                      <td className="p-3 flex justify-center space-x-2">
                        <button
                          onClick={() => handleExport(report)}
                          className="p-2 bg-green-100 text-green-700 rounded-full hover:bg-green-200 transition"
                          title="Export Report"
                        >
                          <FiDownload />
                        </button>
                        <button
                          onClick={() => handleView(report)}
                          className="p-2 bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition"
                          title="View Report"
                        >
                          <FiEye />
                        </button>
                        <button
                          onClick={() => onDelete(report._id)}
                          className="p-2 bg-red-100 text-red-700 rounded-full hover:bg-red-200 transition"
                          title="Delete Report"
                        >
                          <FiTrash2 />
                        </button>
                      </td>
                    </motion.tr>
                  ))}
                </tbody>
              </table>
            </div>
          )
        ) : (
          <motion.div
            initial="hidden"
            animate="visible"
            exit="exit"
            variants={itemVariants}
            className="text-gray-500"
          >
            No reports found.
          </motion.div>
        )}
      </AnimatePresence>

      {/* Pagination */}
      {reports.length > 0 && (
        <div className="mt-4 flex space-x-2 justify-center">
          {Array.from({ length: totalPages }, (_, i) => i + 1).map((num) => (
            <button
              key={num}
              onClick={() => setPage(num)}
              className={`px-3 py-1 rounded-md border transition ${
                page === num
                  ? 'bg-blue-600 text-white border-blue-600'
                  : 'bg-white border-gray-300 hover:bg-gray-50'
              }`}
            >
              {num}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default ReportList;